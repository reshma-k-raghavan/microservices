server.port=8081

# Add Spring Cloud Netflix Eureka Discovery Server properties without username or password authentication
# eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka

# Additional http basic security implemented with in-memory single user which requires username and password to open the URI.
# username=eureka, password=password
# This is verified in discoveryServer: config/SecurityConfig file
eureka.client.serviceUrl.defaultZone=http://eureka:password@localhost:8761/eureka


###################### Distributed Tracing using Spring Cloud Sleuth and Zipkin #########################
# If Spring Cloud sleuth is used to connect to Zipkin UI Tracing tool, then Spring throws error while starting Service, because Sleuth has been migrated to Micrometer.io. To overcome this, the comatiblitiy verifier must be disabled through a property and then start the service without any error.
#spring.zipkin.base-url=http://localhost:9411
#spring.sleuth.sampler.probability=1.0
#spring.cloud.compatibility-verifier.enabled=false

# Alternatively, to connect to Zipkin UI Tracing tool, use Micrometer related properties which includes Sleuth
spring.zipkin.base-url=http://localhost:9411
# Track 100% of request that is received into the system by sending them to Zipkin server (latency analysis tool)
management.tracing.sampling.probability=1.0
# Add Log patterns to display traceID and spanId, which are predefined MDC keys
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]
# For Exemplars to work we need histogram buckets
management.metrics.distribution.percentiles-histogram.http.server.requests=true


# If appliation name is not given, then Eureka server registers the client as UNKNOWN
# In Logs: Registering application UNKNOWN with eureka with status UP
spring.application.name=order-service



############# Circuit-breaker #######################################################
# circuit-breaker health properties enabled through actuator
management.health.circuitbreakers.enabled=true
# enable all endpoints apart from default health endpoints and show all details
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
# To view all 3 states of circuit-breaker: Closed, Open, Half-open 
# Here, inventory is the name of the circuit-breaker configured in OrderController method: placeOrder
resilience4j.circuitbreaker.instances.inventory.register-health-indicator=true
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
# circuit-breaker state chnage threshold value
# If count-based, only after 5 request failures, the circuit-breaker will change state from Closed to Open. 
# If time-based, the circuit-breaker will change state from Closed to Open, after the specified time interval elapses
resilience4j.circuitbreaker.instances.inventory.sliding-window-type=count-based
resilience4j.circuitbreaker.instances.inventory.sliding-window-size=5
# Only if 50% of request calls fails, only then the failure will be decided by chnaging state from Closed to Open.
resilience4j.circuitbreaker.instances.inventory.failure-rate-threshold=50
# Wait for 5s before changing state from Open state toHalf-open state.
resilience4j.circuitbreaker.instances.inventory.wait-duration-in-open-state=5s
# No of test calls made to check if the service is working fine or not, and to move the state from Half-open to either Open or Closed state
resilience4j.circuitbreaker.instances.inventory.permitted-number-of-calls-in-half-open-state=3
resilience4j.circuitbreaker.instances.inventory.automatic-transition-from-open-to-half-open-enabled=true

############# Circuit-breaker timeout properties ##############################################
# order-service will wait for a time duration of 3 secs. If inventory-service doesn't respond by that time, order-service can throw TimeOut exception
resilience4j.timelimiter.instances.inventoryTimeLimiter.timeout-duration=3s

############# Circuit-breaker retry properties ##############################################
# order-service will retry 3 times and will wait for 2s between each retry. If inventory-service doesn't respond even after 3 tries, order-service throws TimeoutException
resilience4j.retry.instances.inventoryRetry.max-attempts=3
resilience4j.retry.instances.inventoryRetry.wait-duration=2s


spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/order_db
spring.datasource.username=root
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect

#In Production: the autoupdate should be none.
#spring.jpa.hibernate.ddl-auto=none
#spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.hibernate.ddl-auto=update

spring.jpa.show-sql=true


##################### Kafka ###################################
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.template.default-topic=notificationTopic
# key=String topic name, value=OrderPlacedEvent Json object. Obtained from, kafkaTemplate.send("notificationTopic", new OrderPlacedEvent(orderDb.getOrderNumber()));  
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
# OrderPlacedEvent in order-service and notification-service are in different packages. Hence mapping is required. 'event' is the token name which must match in producer and consumer
spring.kafka.producer.properties.spring.json.type.mapping=event:com.ms.order.event.OrderPlacedEvent

