# api-gateway runs on port 8083
server.port=8083

## Spring MVC found on classpath, which is incompatible with Spring Cloud Gateway.
## set spring.main.web-application-type=reactive or remove spring-boot-starter-web dependency.
spring.main.web-application-type=reactive

# Add Spring Cloud Netflix Eureka Discovery Server properties without username or password authentication
# eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka

# Additional http basic security implemented with in-memory single user which requires username and password to open the URI.
# username=eureka, password=password
# This is verified in discoveryServer: config/SecurityConfig file
# eureka sends heartbeat messages every 10s
eureka.client.serviceUrl.defaultZone=http://eureka:password@localhost:8761/eureka

spring.application.name=api-gateway

logging.level.root=INFO
logging.level.org.springframework.cloud.gateway=TRACE
logging.level.org.springframework.cloud.gateway.route.RouteDefinitionLocator=INFO

## product-service routes
## Define Routes for product-service. Route the request matching '/api/product' to 'product-service'
## It also add lb(load balancing) to the service nodes
spring.cloud.gateway.routes[0].id=product-service
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/product	
spring.cloud.gateway.routes[0].uri=lb://product-service

## order-service routes
spring.cloud.gateway.routes[1].id==order-service
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/order
spring.cloud.gateway.routes[1].uri=lb://order-service

## inventory-service routes
spring.cloud.gateway.routes[2].id=inventory-service
spring.cloud.gateway.routes[2].predicates[0]=Path=/api/inventory
spring.cloud.gateway.routes[2].uri=lb://inventory-service

## discovery-server routes
## Access Discovery Server through api-gateway.
## Predicate is used to match any field from HTTP Request like Headers, Path Variables, Request Params etc. to a destination URI
## Filters are used to modify requests or responses after it has been sent to intermediate destinations. filters can add new parameters or remove parameters. E.g. AddRequestParams, SetPath, RemoveHeaders etc..
## E.g. Eureka Server is hosted at url: http://localhost:8761. Using api-gateway, it is possible to route requests with uri: http://localhost:8080/eureka/web to http://localhost:8761.
##      Filter will modify the uri: http://localhost:8080/eureka/web to http://localhost:8761 by setting the path to the uri which is '/'.
spring.cloud.gateway.routes[3].id=discovery-server
spring.cloud.gateway.routes[3].predicates[0]=Path=/eureka/web
## uri: lb:/localhost:8761 route only displays basic html. And doesn't load css.
## In the URI: instead of lb, use http
## spring.cloud.gateway.routes[3].uri=lb://localhost:8761
spring.cloud.gateway.routes[3].uri=http://localhost:8761
spring.cloud.gateway.routes[3].filters[0]=SetPath=/

## discovery-server routes to display all static resources like javascript and css also
spring.cloud.gateway.routes[4].id=discovery-server-static
spring.cloud.gateway.routes[4].predicates[0]=Path=/eureka/**
spring.cloud.gateway.routes[4].uri=http://localhost:8761

## When spring boot starts up, it will open the below discovery document to OpenID connect to Keycloak Server and resolve all endpoints for user authentication
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080/realms/spring-boot-microservices-realm



###################### Distributed Tracing using Spring Cloud Sleuth and Zipkin #########################
# If Spring Cloud sleuth is used to connect to Zipkin UI Tracing tool, then Spring throws error while starting Service, because Sleuth has been migrated to Micrometer.io. To overcome this, the comatiblitiy verifier must be disabled through a property and then start the service without any error.
#spring.zipkin.base-url=http://localhost:9411
#spring.sleuth.sampler.probability=1.0
#spring.cloud.compatibility-verifier.enabled=false

# Alternatively, to connect to Zipkin UI Tracing tool, use Micrometer related properties which includes Sleuth
spring.zipkin.base-url=http://localhost:9411
# Track 100% of request that is received into the system by sending them to Zipkin server (latency analysis tool)
management.tracing.sampling.probability=1.0
management.endpoints.web.exposure.include=*
# To avoid exception: zipkin connection refused http://localhost:9411/api/v2/spans, add below property:
management.zipkin.tracing.endpoint=http://localhost:9411
# Add Log patterns to display traceID and spanId, which are predefined MDC keys
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]
# For Exemplars to work we need histogram buckets
management.metrics.distribution.percentiles-histogram.http.server.requests=true