
eureka.instance.hostname=localhost

# To avoid the server to register itself as a client
# eureka sends heartbeat messages every 10s
eureka.client.register-with-eureka=false
eureka.client.fetch-registry=false

spring.application.name=discovery-server

# default Tomcat Eureka server port
server.port=8761

# Username and password of In-Memory single user, for demo purpose.
# The values arespecified in environment variables EUREKA_USERNAME, EUREKA_PASSWORD. 
# If values are not added to env, then default values from code will be taken.
eu.username=${EUREKA_USERNAME:eureka}
eu.password=${EUREKA_PASSWORD:password}


###################### Distributed Tracing using Spring Cloud Sleuth and Zipkin #########################
# If Spring Cloud sleuth is used to connect to Zipkin UI Tracing tool, then Spring throws error while starting Service, because Sleuth has been migrated to Micrometer.io. To overcome this, the comatiblitiy verifier must be disabled through a property and then start the service without any error.
#spring.zipkin.base-url=http://localhost:9411
#spring.sleuth.sampler.probability=1.0
#spring.cloud.compatibility-verifier.enabled=false

# Alternatively, to connect to Zipkin UI Tracing tool, use Micrometer related properties which includes Sleuth
spring.zipkin.base-url=http://localhost:9411
# Track 100% of request that is received into the system by sending them to Zipkin server (latency analysis tool)
management.tracing.sampling.probability=1.0
management.endpoints.web.exposure.include=*
# To avoid exception: zipkin connection refused http://localhost:9411/api/v2/spans, add below property:
management.zipkin.tracing.endpoint=http://localhost:9411
# Add Log patterns to display traceID and spanId, which are predefined MDC keys
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]
# For Exemplars to work we need histogram buckets
management.metrics.distribution.percentiles-histogram.http.server.requests=true