# Run notification-service on a random port
server.port=0

# Add Spring Cloud Netflix Eureka Discovery Server properties without username or password authentication
# eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka

# Additional http basic security implemented with in-memory single user which requires username and password to open the URI.
# username=eureka, password=password
# This is verified in discoveryServer: config/SecurityConfig file
eureka.client.serviceUrl.defaultZone=http://eureka:password@localhost:8761/eureka

# If appliation name is not given, then Eureka server registers the client as UNKNOWN
# In Logs: Registering application UNKNOWN with eureka with status UP
spring.application.name=notification-service

###################### Distributed Tracing using Spring Cloud Sleuth and Zipkin #########################
# If Spring Cloud sleuth is used to connect to Zipkin UI Tracing tool, then Spring throws error while starting Service, because Sleuth has been migrated to Micrometer.io. To overcome this, the comatiblitiy verifier must be disabled through a property and then start the service without any error.
#spring.zipkin.base-url=http://localhost:9411
#spring.sleuth.sampler.probability=1.0
#spring.cloud.compatibility-verifier.enabled=false

# Alternatively, to connect to Zipkin UI Tracing tool, use Micrometer related properties which includes Sleuth
spring.zipkin.base-url=http://localhost:9411
# Track 100% of request that is received into the system by sending them to Zipkin server (latency analysis tool)
management.tracing.sampling.probability=1.0
management.endpoints.web.exposure.include=*
# To avoid exception: zipkin connection refused http://localhost:9411/api/v2/spans, add below property:
management.zipkin.tracing.endpoint=http://localhost:9411
# Add Log patterns to display traceID and spanId, which are predefined MDC keys
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]
# For Exemplars to work we need histogram buckets
management.metrics.distribution.percentiles-histogram.http.server.requests=true

##################### Kafka ###################################
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.template.default-topic=notificationTopic
# key=String topic name, value=OrderPlacedEvent Json object.
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
# OrderPlacedEvent in order-service and notification-service are in different packages. Hence mapping is required. 'event' is the token name which must match in producer and consumer
spring.kafka.consumer.properties.spring.json.type.mapping=event:com.ms.notify.event.OrderPlacedEvent
# To avoid exception in KafkaListenerEndpointRegistry: No group.id found in consumer config, container properties, or @KafkaListener annotation; a group.id is required when group management
spring.kafka.consumer.group-id=notificationId